import pytest
from pipen_runinfo.session_info import (
    inject_session_code_python,
    inject_session_code_r,
    inject_session_code_bash,
    inject_session_code_fish,
    get_inject_session_code_fun,
)


@pytest.mark.parametrize("show_path, include_submodule", [(True, False), (False, True)])
def test_inject_session_code_python(show_path, include_submodule):
    script = "print('Hello, World!')"
    injected_script = inject_session_code_python(script, show_path, include_submodule)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: python" in injected_script


def test_inject_session_code_r():
    script = "print('Hello, World!')"
    injected_script = inject_session_code_r(script, False, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: R" in injected_script


def test_inject_session_code_bash():
    script = "echo 'Hello, World!'"
    injected_script = inject_session_code_bash(script, False, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: bash" in injected_script


def test_inject_session_code_fish():
    script = "echo 'Hello, World!'"
    injected_script = inject_session_code_fish(script, False, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: fish" in injected_script


def test_inject_session_code_python_with_future_import():
    script = "from __future__ import annotations\nprint('Hello, World!')"
    injected_script = inject_session_code_python(script, True, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: python" in injected_script
    assert "from __future__ import annotations" in injected_script


def test_inject_session_code_python_with_future_import_with_comments():
    script = (
        "# Some comment\nfrom __future__ import annotations\nprint('Hello, World!')"
    )
    injected_script = inject_session_code_python(script, True, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: python" in injected_script
    assert "from __future__ import annotations" in injected_script


def test_inject_session_code_python_without_future_import():
    script = "print('Hello, World!')"
    injected_script = inject_session_code_python(script, True, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: python" in injected_script
    assert "from __future__ import annotations" not in injected_script


def test_inject_session_code_python_future_import_not_at_top():
    script = """
    # Some comment
    print('Hello, World!')
    x = '''
from __future__ import annotations
'''"""
    injected_script = inject_session_code_python(script, True, False)
    assert "Generated by pipen_runinfo" in injected_script
    assert "Lang: python" in injected_script
    assert "from __future__ import annotations" not in injected_script.splitlines()[0]


def test_get_inject_session_code_fun():
    assert get_inject_session_code_fun("python") == inject_session_code_python
    assert get_inject_session_code_fun("R") == inject_session_code_r
    assert get_inject_session_code_fun("bash") == inject_session_code_bash
    assert get_inject_session_code_fun("fish") == inject_session_code_fish
    assert get_inject_session_code_fun("unknown") is None
